//recupero la info de usuarioContext
  const usuario = useContext(usuarioContext);

  //recupero la info de resultadosLugaresContext
  // const lugares = useContext(resultadosLugaresContext);

  const [dataFavsDB, setDataFavsDB] = useState([]);
  const [usuarioUID, setUsuarioUID] = useState('');
  const [favoritosFinal, setFavoritosFinal] = useState([]);
  const [dataApi, setDataApi] = useState([]);



  //primero consigue la data del usuario
  const fetchUserID = async () => {
    try {
      if (usuario) {
        setUsuarioUID(usuario.user.uid);
      }
    } catch (error) {
      console.error('Error al obtener el ID del usuario:', error);
    }
  };

  useEffect(() => {
    fetchUserID();
  }, [usuario]);



  //segundo, busca los favoritos en la db
  //referencia a la db de firebase: tiene que ir a db y de ahi a la coleccion favoritos usando la funcionalidad collection de firebase
  const favoritosCollection = collection(db, "Favoritos");

  //hacer el asincronismo con la db
  const getFavoritos = async (uid) => {
    // console.log("esta buscando en la db");
    try {
      const q = query(favoritosCollection, where("usuario", "==", uid));  //aca pide que sean del usuario activo

      const data = await getDocs(q);
      setDataFavsDB(
        data.docs.map((doc) => ({ ...doc.data().favoritos })) //aca trae el array favoritos del doc de corresponde a ese usuarioID
      );
    } catch (error) {
      console.log("Error al conseguir los favoritos de la db", error);
    }
  }

  //busca los lugares de la api
  useEffect(() => {
    async function getDataApi() {
      try {
        const response = await fetch(
          "https://punctualturbodeletion--jeiras2020.repl.co/products/"
        );
        const responseData = await response.json();
        setDataApi(responseData);
      } catch (error) {
        console.log("error al obtener datos de la api", error);
      }
    }
  }, []);


  //filtra los lugares que trae la api para que deje los que estan en la lista de favoritos
  const lugaresFiltradosByPostID = (dataFavsDB) => {
    const favoritosIDs = dataFavsDB.flatMap(obj => Object.values(obj));
    console.log(favoritosIDs);
    console.log(dataApi);
    if (dataApi) {
      console.log("esta filtrando los lugares");
      const lugaresFiltrados = dataApi.filter((lugar) => lugar.post_id === favoritosIDs);
      setFavoritosFinal(lugaresFiltrados);
    } else {
      console.log("hay un problema obteniendo los lugares del usecontext");
    }
  };

  useEffect(() => {
    if (usuarioUID != null) {
      getFavoritos(usuarioUID);
      if ((dataFavsDB.length > 0) && (dataApi.length > 0)) {
        lugaresFiltradosByPostID(dataFavsDB);
      }
    }
  }, [dataFavsDB]);


  console.log(usuarioUID);
  console.log(dataFavsDB);
  console.log(favoritosFinal);
  console.log(dataApi);

